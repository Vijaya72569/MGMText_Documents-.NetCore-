using System.ComponentModel.DataAnnotations;

public class Student
{
    public int Id { get; set; }

    [Required]
    public string Name { get; set; }

    [Required, EmailAddress]
    public string Email { get; set; }

    [Required]
    [Display(Name = "Contact Number")]
    public string ContactNumber { get; set; }

    [Required]
    public string Gender { get; set; }

    [Required]
    public string Course { get; set; }

    public List<string> Hobbies { get; set; }
    public List<string> Skills { get; set; }

    public string HobbiesStr => string.Join(",", Hobbies ?? new List<string>());
    public string SkillsStr => string.Join(",", Skills ?? new List<string>());
    
}
============================================================

public class StudentRepository
{
    private readonly string _connectionString;

    public StudentRepository(IConfiguration configuration)
    {
        _connectionString = configuration.GetConnectionString("DefaultConnection");
    }

    public void AddStudent(Student student)
    {
        using var con = new SqlConnection(_connectionString);
        var cmd = new SqlCommand(@"INSERT INTO Student (Name, Email, ContactNumber, Gender, Course, Hobbies, Skills)
                                   VALUES (@Name, @Email, @ContactNumber, @Gender, @Course, @Hobbies, @Skills)", con);

        cmd.Parameters.AddWithValue("@Name", student.Name);
        cmd.Parameters.AddWithValue("@Email", student.Email);
        cmd.Parameters.AddWithValue("@ContactNumber", student.ContactNumber);
        cmd.Parameters.AddWithValue("@Gender", student.Gender);
        cmd.Parameters.AddWithValue("@Course", student.Course);
        cmd.Parameters.AddWithValue("@Hobbies", student.HobbiesStr);
        cmd.Parameters.AddWithValue("@Skills", student.SkillsStr);

        con.Open();
        cmd.ExecuteNonQuery();
    }

    public List<Student> GetAllStudents()
    {
        var students = new List<Student>();
        using var con = new SqlConnection(_connectionString);
        var cmd = new SqlCommand("SELECT * FROM Student", con);
        con.Open();
        var reader = cmd.ExecuteReader();

        while (reader.Read())
        {
            students.Add(new Student
            {
                Id = (int)reader["Id"],
                Name = reader["Name"].ToString(),
                Email = reader["Email"].ToString(),
                ContactNumber = reader["ContactNumber"].ToString(),
                Gender = reader["Gender"].ToString(),
                Course = reader["Course"].ToString(),
                Hobbies = reader["Hobbies"].ToString()?.Split(',').ToList(),
                Skills = reader["Skills"].ToString()?.Split(',').ToList()
            });
        }
        return students;
    }

    public Student GetStudentById(int id)
    {
        using var con = new SqlConnection(_connectionString);
        var cmd = new SqlCommand("SELECT * FROM Student WHERE Id = @Id", con);
        cmd.Parameters.AddWithValue("@Id", id);
        con.Open();
        var reader = cmd.ExecuteReader();
        if (reader.Read())
        {
            return new Student
            {
                Id = (int)reader["Id"],
                Name = reader["Name"].ToString(),
                Email = reader["Email"].ToString(),
                ContactNumber = reader["ContactNumber"].ToString(),
                Gender = reader["Gender"].ToString(),
                Course = reader["Course"].ToString(),
                Hobbies = reader["Hobbies"].ToString()?.Split(',').ToList(),
                Skills = reader["Skills"].ToString()?.Split(',').ToList()
            };
        }
        return null;
    }

    public void UpdateStudent(Student student)
    {
        using var con = new SqlConnection(_connectionString);
        var cmd = new SqlCommand(@"UPDATE Student SET 
                Name=@Name, Email=@Email, ContactNumber=@ContactNumber, 
                Gender=@Gender, Course=@Course, Hobbies=@Hobbies, Skills=@Skills 
                WHERE Id=@Id", con);

        cmd.Parameters.AddWithValue("@Id", student.Id);
        cmd.Parameters.AddWithValue("@Name", student.Name);
        cmd.Parameters.AddWithValue("@Email", student.Email);
        cmd.Parameters.AddWithValue("@ContactNumber", student.ContactNumber);
        cmd.Parameters.AddWithValue("@Gender", student.Gender);
        cmd.Parameters.AddWithValue("@Course", student.Course);
        cmd.Parameters.AddWithValue("@Hobbies", student.HobbiesStr);
        cmd.Parameters.AddWithValue("@Skills", student.SkillsStr);

        con.Open();
        cmd.ExecuteNonQuery();
    }

    public void DeleteStudent(int id)
    {
        using var con = new SqlConnection(_connectionString);
        var cmd = new SqlCommand("DELETE FROM Student WHERE Id = @Id", con);
        cmd.Parameters.AddWithValue("@Id", id);
        con.Open();
        cmd.ExecuteNonQuery();
    }
}
=============================================================

================================================================
public class StudentController : Controller
{
    private readonly StudentRepository _repo;
    private readonly List<string> courses = new() { "B.Tech", "B.Sc", "MCA", "MBA" };
    private readonly List<string> skills = new() { "C#", "Java", "Python", "SQL", "Angular", "React" };
    private readonly List<string> Hobbies = new() { "Reading", "Traveling", "Gaming", "Music" };


    public StudentController(IConfiguration configuration)
    {
        _repo = new StudentRepository(configuration);
    }

    private void LoadViewData()
    {
        ViewBag.Courses = courses;
        ViewBag.AllSkills = skills;
        ViewBag.AllHobbies=Hobbies;
    }

    public IActionResult Index()
    {
        var students = _repo.GetAllStudents();
        return View(students);
    }

    public IActionResult Register()
    {
        LoadViewData();
        return View();
    }

    [HttpPost]
    public IActionResult Register(Student model)
    {
        if (ModelState.IsValid)
        {
            _repo.AddStudent(model);
            return RedirectToAction("Index");
        }

        LoadViewData();
        return View(model);
    }

    public IActionResult Edit(int id)
    {
        var student = _repo.GetStudentById(id);
        if (student == null) return NotFound();
        LoadViewData();
        return View(student);
    }

    [HttpPost]
    public IActionResult Edit(Student model)
    {
        if (ModelState.IsValid)
        {
            _repo.UpdateStudent(model);
            return RedirectToAction("Index");
        }
        LoadViewData();
        return View(model);
    }

    public IActionResult Delete(int id)
    {
        var student = _repo.GetStudentById(id);
        if (student == null) return NotFound();
        return View(student);
    }

    [HttpPost, ActionName("Delete")]
    public IActionResult DeleteConfirmed(int id)
    {
        _repo.DeleteStudent(id);
        return RedirectToAction("Index");
    }
}

==================================================================

@model Student

@{
    ViewData["Title"] = "Student Registration";
   
}

<h2>Student Registration</h2>

<form asp-action="Register" method="post">
    <div class="form-group">
        <label asp-for="Name"></label>
        <input asp-for="Name" class="form-control" />
        <span asp-validation-for="Name" class="text-danger"></span>
    </div>

    <div class="form-group">
        <label asp-for="Email"></label>
        <input asp-for="Email" class="form-control" />
        <span asp-validation-for="Email" class="text-danger"></span>
    </div>

    <div class="form-group">
        <label asp-for="ContactNumber"></label>
        <input asp-for="ContactNumber" class="form-control" />
        <span asp-validation-for="ContactNumber" class="text-danger"></span>
    </div>

    <div class="form-group">
        <label>Gender:</label><br />
        <input type="radio" asp-for="Gender" value="Male" /> Male
        <input type="radio" asp-for="Gender" value="Female" /> Female
        <span asp-validation-for="Gender" class="text-danger"></span>
    </div>

    <div class="form-group">
        <label>Course:</label>
        <select asp-for="Course" class="form-control">
            <option value="">-- Select Course --</option>
            @foreach (var course in ViewBag.Courses as List<string>)
            {
                <option value="@course">@course</option>
            }
        </select>
        <span asp-validation-for="Course" class="text-danger"></span>
    </div>

    <div class="form-group">
        <label>Hobbies:</label><br />
      @foreach (var hobby in ViewBag.AllHobbies as List<string>)
{
    <label class="mr-2">
        <input type="checkbox" name="Hobbies" value="@hobby"
               @(Model.Hobbies != null && Model.Hobbies.Contains(hobby) ? "checked" : "") />
        @hobby
    </label>
}
    </div>

    <div class="form-group">
        <label>Skills (Multi Select):</label><br />
        <select asp-for="Skills" asp-items="new MultiSelectList(ViewBag.AllSkills)" multiple="multiple" class="form-control" size="5">
        </select>
    </div>

    <button type="submit" class="btn btn-primary">Submit</button>
</form>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
}
======================================================

@model List<Student>

@{
    ViewData["Title"] = "Student List";
}

<h2>Student List</h2>
<a asp-action="Register" class="btn btn-primary">Add New Student</a>
<table class="table table-bordered mt-3">
    <thead>
        <tr>
            <th>Name</th>
            <th>Email</th>
            <th>Contact</th>
            <th>Gender</th>
            <th>Course</th>
            <th>Hobbies</th>
            <th>Skills</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
@foreach (var student in Model)
{
    <tr>
        <td>@student.Name</td>
        <td>@student.Email</td>
        <td>@student.ContactNumber</td>
        <td>@student.Gender</td>
        <td>@student.Course</td>
        <td>@string.Join(", ", student.Hobbies)</td>
        <td>@string.Join(", ", student.Skills)</td>
        <td>
            <a asp-action="Edit" asp-route-id="@student.Id" class="btn btn-sm btn-warning">Edit</a>
            <a asp-action="Delete" asp-route-id="@student.Id" class="btn btn-sm btn-danger">Delete</a>
        </td>
    </tr>
}
    </tbody>
</table>

[RegularExpresion(@"^[\w\-]+@[\w\-]+\.[a-zA-Z]{2,4}$",ErrorMessage="Invalid Email")]
[RegularExpresion(@"^[789]\d{9}$",ErrorMessage="Invalid phone number")]